<?php
/**
 * Created by Daniel BatÄ›k (http://webloop.io/)
 * User: keyBeatz
 * Package: webloopio:nette-websockets
 * Date: 13.03. 2018
 * Time: 16:07
 * License: MIT
 * Since: 0.1
 */

namespace Webloopio\NetteWebsockets\Client;

use Nette\Security\AuthenticationException;
use Nette\Security\Identity;
use Nette\Security\IIdentity;
use Ratchet\ConnectionInterface;
use Webloopio\Exceptions\ClientLogicException;
use Webloopio\Exceptions\ClientRuntimeException;
use Webloopio\NetteWebsockets\Client\IClientConnection;
use Webloopio\NetteWebsockets\DI\NetteWebsocketsExtension;


/**
 * Class Client
 * @package AllStars\WebSockets
 */
class Client implements IClientConnection {

    /**
     * @var ConnectionInterface
     */
    private $connection;
    /**
     * @var resource id of connection (generated by ratchet server)
     */
    private $resourceId;
    /**
     * @var string|null
     */
    private $userId;
    /**
     * @var string|null
     */
    private $presenterName;
    /**
     * @var int|null
     */
    private $pageId;
    /**
     * @var bool
     */
    private $isLoggedIn = false;
    /**
     * @var IAuthenticator|null
     */
    private $authenticator;
    /**
     * @var string|null
     */
    private $authenticatorType;
    /**
     * @var IIdentity|null
     */
    private $identity;

    /**
     * Client constructor.
     *
     * @param ConnectionInterface $connection
     * @param IIdentity|null $identity
     *
     * @throws ClientLogicException
     */
    function __construct(
        ConnectionInterface $connection,
        IIdentity $identity = null
    ) {
        $this->connection = $connection;
        $this->resourceId = $connection->resourceId ?? null;
        $this->identity = $identity;

        if( $this->resourceId === null ) {
            throw new ClientLogicException("No resource id was provided in connection. Can't create object.");
        }
    }

    /**
     * @return ConnectionInterface
     */
    public function getConnection(): ConnectionInterface {
        return $this->connection;
    }

    /**
     * @return int
     */
    public function getResourceId(): int {
        return $this->resourceId;
    }

    /**
     * @return string|null
     */
    public function getUserId() {
        return $this->getIdentity() ? $this->getIdentity()->getId() : null;
    }

    /**
     * @return array
     */
    public function getUserRoles(): array {
        return $this->getIdentity()->getRoles();
    }

    /**
     * @return array
     */
    public function getUserIdentityData(): array {
        $identity = $this->getIdentity();
        return method_exists( $identity, 'getData' ) ? $identity->getData() : [];
    }

    /**
     * @param string $message
     */
    final public function send( $message ) {
        $this->connection->send( $message );
    }

    /**
     *
     */
    final public function close() {
        $this->connection->close();
    }

    /**
     * @return null|string
     */
    public function getPresenterName() {
        return $this->presenterName;
    }

    /**
     * @param null|string $presenterName
     */
    public function setPresenterName( string $presenterName = null ) {
        $this->presenterName = $presenterName;
    }

    /**
     * @return null|int
     */
    public function getPageId() {
        return $this->pageId;
    }

    /**
     * @param int $pageId
     */
    public function setPageId( int $pageId ) {
        $this->pageId = $pageId;
    }

    /**
     * Login user by providing his credentials
     *
     * @param $login
     * @param $password
     *
     * @return IIdentity|false - false when login failed
     */
    public function login( $login, $password ) {
        try {
            $identity = $this->authenticator->authenticate([
                $login, $password
            ]);
            $this->identity = $identity;
            $this->isLoggedIn = true;
            return $identity;
        }
        catch( AuthenticationException $e ) {
            wsdump("Bad login");
        }
        return false;
    }

    /**
     * Check if user was logged in
     * @return bool
     */
    public function isLoggedIn(): bool {
        return $this->isLoggedIn;
    }

    /**
     * Logouts user
     */
    public function logout() {
        $this->identity = null;
        $this->isLoggedIn = false;
    }

    /**
     * @return IIdentity|null
     */
    public function getIdentity() {
        return $this->identity;
    }

    /**
     * @param $token
     *
     * @throws ClientLogicException
     * @throws ClientRuntimeException
     */
    public function verifyToken( string $token ) {
        if( !$token ) {
            throw new ClientLogicException( "Token can't be empty" );
        }
        if( $this->authenticator === null ) {
            throw new ClientLogicException( "An authenticator must be set" );
        }

        $authenticatorImplementations = class_implements( $this->authenticator );

        if( $this->authenticatorType === NetteWebsocketsExtension::AUTHENTICATION_JWT ) {
            if( !isset( $authenticatorImplementations[ IJWTAuthenticator::class ] ) ) {
                throw new ClientLogicException( "Authenticator must implement " . IJWTAuthenticator::class . " interface" );
            }
            /** @var IJWTAuthenticator $jwtAuthenticator */
            $jwtAuthenticator = $this->authenticator;
            $result = $jwtAuthenticator->verifyToken( $token );
            if( $result === false ) {
                $this->logout();
                wsdump( "Token verify has failed, therefore logging out" );
            }
            else {
                $result = (array) $result;
                wsdump( $result, "Token verify is ok" );
                if( !$this->isLoggedIn() ) {
                    wsdump( "Was not logged in, but token was verified therefore logging back." );
                    $userId = $result[IJWTAuthenticator::USER_ID_TOKEN_PAYLOAD_KEY] ?? null;
                    $userRoles = $result[IJWTAuthenticator::USER_ROLES_TOKEN_PAYLOAD_KEY] ?? [];
                    $userData = [];
                    if( !$userId ) {
                        throw new ClientLogicException( "When re-logging client from JWT token the " . IJWTAuthenticator::USER_ID_TOKEN_PAYLOAD_KEY . " key must be set and not empty in token payload." );
                    }
                    $this->identity = new Identity( $userId, $userRoles, $userData );
                }
            }
        }
        else {
            throw new ClientRuntimeException( "Authentication type {$this->authenticatorType} is not allowed." );
        }
    }

    /**
     * @param $authenticatorType
     * @param IAuthenticator $authenticator
     */
    public function setAuthenticator( $authenticatorType, IAuthenticator $authenticator ) {
        $this->authenticatorType = $authenticatorType;
        $this->authenticator = $authenticator;
    }

}

